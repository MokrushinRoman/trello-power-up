import os
from dotenv import load_dotenv  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dotenv –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env —Ñ–∞–π–ª–∞–º–∏
from flask import Flask, request, jsonify
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Trello API, —á–∏—Ç–∞–µ–º –∏—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TRELLO_API_KEY = os.getenv("TRELLO_API_KEY")
TRELLO_TOKEN = os.getenv("TRELLO_TOKEN")
BASE_TRELLO_URL = "https://api.trello.com/1"

if not TRELLO_API_KEY or not TRELLO_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TRELLO_API_KEY –∏ TRELLO_TOKEN.")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Trello API
def trello_request(method, endpoint, params=None, data=None):
    """–û–±–æ–±—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Trello API."""
    url = f"{BASE_TRELLO_URL}/{endpoint}"
    params = params or {}
    params.update({'key': TRELLO_API_KEY, 'token': TRELLO_TOKEN})
    try:
        response = requests.request(method, url, params=params, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ Trello API: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π Trello
def validate_trello_keys():  
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –∫–ª—é—á–∏ API –∏ —Ç–æ–∫–µ–Ω."""  
    response = trello_request("GET", "members/me")  
    if not response:  
        raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TRELLO_API_KEY –∏ TRELLO_TOKEN.")  
    print(f"–ö–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Trello: {response.get('fullName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

validate_trello_keys()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –æ–±—ä–µ–∫—Ç–∞ (–¥–æ—Å–∫–∏ –∏–ª–∏ —Å–ø–∏—Å–∫–∞)
def get_trello_id(endpoint, name):
    """–ò—â–µ—Ç ID –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏."""
    items = trello_request("GET", endpoint)
    if not items:
        return None
    name_lower = name.lower()
    return next((item['id'] for item in items if item['name'].lower() == name_lower), None)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
def handle_trello_action(action_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    action = action_data.get("action", "").lower()

    if action == "create_card":
        board_name = action_data.get("board_name", "").lower()
        list_name = action_data.get("list_name", "").lower()
        card_name = action_data.get("card_name")
        card_desc = action_data.get("card_desc", "")

        if not board_name or not list_name or not card_name:
            missing_params = []
            if not board_name:
                missing_params.append("'board_name'")
            if not list_name:
                missing_params.append("'list_name'")
            if not card_name:
                missing_params.append("'card_name'")
            return {"error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(missing_params)}."}

        # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å–∫–∏
        board_id = get_trello_id("members/me/boards", board_name)
        if not board_id:
            return {"error": f"–î–æ—Å–∫–∞ '{board_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–∏—Å–∫–∞
        list_id = get_trello_id(f"boards/{board_id}/lists", list_name)
        if not list_id:
            return {"error": f"–°–ø–∏—Å–æ–∫ '{list_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ '{board_name}'"}

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card = trello_request("POST", "cards", params={
            'idList': list_id,
            'name': card_name,
            'desc': card_desc
        })
        if card:
            return {"status": "success", "message": f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ '{list_name}'!"}
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"}

    elif action == "move_card":
        card_name = action_data.get("card_name")
        target_list_name = action_data.get("target_list_name", "").lower()
        board_name = action_data.get("board_name", "").lower()

        if not card_name or not target_list_name or not board_name:
            return {"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã 'card_name', 'target_list_name' –∏ 'board_name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'move_card'."}

        # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å–∫–∏
        board_id = get_trello_id("members/me/boards", board_name)
        if not board_id:
            return {"error": f"–î–æ—Å–∫–∞ '{board_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
        target_list_id = get_trello_id(f"boards/{board_id}/lists", target_list_name)
        if not target_list_id:
            return {"error": f"–°–ø–∏—Å–æ–∫ '{target_list_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–æ—Å–∫–µ '{board_name}'"}

        # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        cards = trello_request("GET", f"boards/{board_id}/cards")
        card_id = next((c['id'] for c in cards if c['name'] == card_name), None)
        if not card_id:
            return {"error": f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ '{board_name}'"}

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        updated_card = trello_request("PUT", f"cards/{card_id}", params={"idList": target_list_id})
        if updated_card:
            return {"status": "success", "message": f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ '{target_list_name}'!"}
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"}

    elif action == "delete_card":
        card_name = action_data.get("card_name")
        board_name = action_data.get("board_name", "").lower()

        if not card_name or not board_name:
            return {"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã 'card_name' –∏ 'board_name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'delete_card'."}

        # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å–∫–∏
        board_id = get_trello_id("members/me/boards", board_name)
        if not board_id:
            return {"error": f"–î–æ—Å–∫–∞ '{board_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        cards = trello_request("GET", f"boards/{board_id}/cards")
        card_id = next((c['id'] for c in cards if c['name'] == card_name), None)
        if not card_id:
            return {"error": f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ '{board_name}'"}

        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        response = trello_request("DELETE", f"cards/{card_id}")
        if response is None:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"}
        return {"status": "success", "message": f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

    elif action == "update_card_desc":
        card_name = action_data.get("card_name")
        board_name = action_data.get("board_name", "").lower()
        new_desc = action_data.get("new_desc", "")

        if not card_name or not board_name:
            return {"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã 'card_name' –∏ 'board_name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'update_card_desc'."}

        # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å–∫–∏
        board_id = get_trello_id("members/me/boards", board_name)
        if not board_id:
            return {"error": f"–î–æ—Å–∫–∞ '{board_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        cards = trello_request("GET", f"boards/{board_id}/cards")
        card_id = next((c['id'] for c in cards if c['name'] == card_name), None)
        if not card_id:
            return {"error": f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ '{board_name}'"}

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        updated_card = trello_request("PUT", f"cards/{card_id}", params={"desc": new_desc})
        if updated_card:
            return {"status": "success", "message": f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ '{card_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ."}
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"}

    return {"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"}

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    if not data:
        return jsonify({"error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã"}), 400

    result = handle_trello_action(data)
    return jsonify(result)

# –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
@app.route("/", methods=["GET"])
def home():
    return "Flask —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ", 200

if __name__ == "__main__":
    app.run(port=5000)
